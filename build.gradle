import java.util.Collections;

import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.EvaluatorException;

import com.googlecode.htmlcompressor.compressor.HtmlCompressor;
import com.yahoo.platform.yui.compressor.CssCompressor;
import com.yahoo.platform.yui.compressor.JavaScriptCompressor;

apply plugin: 'java'
apply plugin: 'eclipse'

buildscript {
	ext {
		appengineVersion = '1.7.1'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath group: 'com.google.appengine', name: 'appengine-tools-sdk', version: ext.appengineVersion 
		classpath group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.4.7'
		classpath group: 'com.googlecode.htmlcompressor', name: 'htmlcompressor', version: '1.5.2'
	}
}

class YUICompressorErrorReporter implements ErrorReporter {
	private final logger
	YUICompressorErrorReporter(logger) {
		this.logger = logger
	}
	void warning(String message, String sourceName, int line, String lineSource, int lineOffset) {
		logger.warn(message)
	}
	void error(String message, String sourceName, int line, String lineSource, int lineOffset) {
		logger.error(message)
	}
	EvaluatorException runtimeError(String message, String sourceName, int line, String lineSource, int lineOffset) {
		logger.error(message)
	}
}

ext {
	appengineSdkBaseDir = file('../appengine-java-sdk')
	appengineSdkDir = new File(appengineSdkBaseDir, "appengine-java-sdk-${appengineVersion}")
	sourceWebappDir = file('webapp')
	buildWebappDir = new File(buildDir, 'webapp')
}

sourceCompatibility = 1.6

sourceSets {
	apt
}

configurations {
	appengineSdk
}

repositories {
	mavenCentral()
	mavenRepo(url: 'http://maven.seasar.org/maven2/')
	mavenRepo(url: 'http://mavenrepo.google-api-java-client.googlecode.com/hg')
}

dependencies {
	compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'

	compile group: 'com.google.appengine', name: 'appengine-api-1.0-sdk', version: ext.appengineVersion
	compile group: 'com.google.appengine', name: 'appengine-api-labs', version: ext.appengineVersion
	testCompile group: 'com.google.appengine', name: 'appengine-testing', version: ext.appengineVersion
	testCompile group: 'com.google.appengine', name: 'appengine-api-stubs', version: ext.appengineVersion
	runtime group: 'com.google.appengine', name: 'appengine-tools-sdk', version: ext.appengineVersion

	compile(group: 'org.slim3', name: 'slim3', version: '1.0.16') { exclude group: 'com.google.appengine' }
	aptCompile(group: 'org.slim3', name: 'slim3-gen', version: '1.0.16') { exclude group: 'org.apache.ant' }

	testCompile group: 'junit', name: 'junit', version: '4.10'
	testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.0'

	compile group: 'com.google.apis', name: 'google-api-services-tasks', version: 'v1-rev3-1.7.2-beta'
	compile group: 'com.google.http-client', name: 'google-http-client-appengine', version: '1.10.3-beta'
	compile group: 'commons-io', name: 'commons-io', version: '2.4'

	appengineSdk group: 'com.google.appengine', name: 'appengine-java-sdk', version: ext.appengineVersion
}

/*
 * APT generation support 
 */
task compileAptJava(overwrite: true) {
	inputs.dir sourceSets.main.java.srcDirs
	outputs.dir sourceSets.apt.output.resourcesDir
	doLast {
		sourceSets.apt.output.resourcesDir.mkdirs()
		ant.path(id: 'aptFactoryPath', location: configurations.aptCompile.asPath)
		ant.apt(compile: false,
			includeAntRuntime: false,
			factorypathref: 'aptFactoryPath',
			classpath: configurations.compile.asPath,
			preprocessdir: sourceSets.apt.output.resourcesDir,
			encoding: 'UTF-8') {
			sourceSets.main.java.srcDirs.each{
				src(path: it)
			}
		}
	}
}

compileJava.dependsOn compileAptJava
compileJava.source sourceSets.apt.output.resourcesDir

/*
 * Eclipse support
 */
eclipse {
}

task eclipseAptFactory(type: Copy) {
	from configurations.aptCompile.files
	into new File(buildDir, 'eclipse/apt-factory')
}

task cleanEclipseWebInfLib(type: Delete) {
	delete new File(projectDir, 'webapp/WEB-INF/lib')
}

task eclipseWebInfLib(type: Copy) {
	dependsOn cleanEclipseWebInfLib
	from configurations.runtime.files
	into new File(projectDir, 'webapp/WEB-INF/lib')
}

// overwrite to prevent breaking Eclipse project files
task eclipse(overwrite: true) {
	dependsOn eclipseAptFactory
	dependsOn eclipseWebInfLib
}

/*
 * deployment support
 */
task buildWebappContents(type: Sync) {
	from project.ext.sourceWebappDir
	into project.ext.buildWebappDir
	exclude 'WEB-INF/lib', 'WEB-INF/classes', 'WEB-INF/appengine-generated'
}

task buildWebappLib(type: Sync) {
	dependsOn jar
	from configurations.runtime.files
	from configurations.archives.artifacts.files
	into new File(project.ext.buildWebappDir, 'WEB-INF/lib')
}

task buildWebappMinifiedHTML {
	ext {
		inputFile = new File(project.ext.sourceWebappDir, 'source.html')
		outputFile = new File(project.ext.buildWebappDir, 'production.html')
		preservePatterns = [
			// preserve knockout.js instructions
			~/<!-- *\/?ko .*?-->/,
			// preserve HTML templates
			~/<script +?type="text\/html".*?>/
		]
		reporter = new YUICompressorErrorReporter(project.logger)
	}
	inputs.files ext.inputFile
	outputs.files ext.outputFile
	doLast {
		def compressor = new HtmlCompressor()
		compressor.with {
			removeComments = false
			compressCss = true
			compressJavaScript = true
			removeIntertagSpaces = true
			preservePatterns = ext.preservePatterns
			yuiErrorReporter = ext.reporter
		}
		ext.outputFile << compressor.compress(ext.inputFile.text)
	}
}

task buildWebappMinifiedCSS {
	ext {
		inputBase = file('src/main/css')
		inputFiles = new File(inputBase, 'assets.conf').readLines().collect { new File(inputBase, it) }
		outputFile = new File(project.ext.buildWebappDir, 'production.css')
	}
	inputs.files ext.inputFiles
	outputs.files ext.outputFile
	doLast {
		ext.outputFile.withWriter { writer ->
			ext.inputFiles.each { it.withReader { new CssCompressor(it).compress(writer, -1) } }
		}
	}
}

task buildWebappMinifiedJavaScript {
	ext {
		inputBase = file('src/main/javascript')
		inputFiles = new File(inputBase, 'assets.conf').readLines().collect { new File(inputBase, it) }
		inputMinFiles = inputFiles.grep { it.path.endsWith('.min.js') }
		inputRawFiles = inputFiles.grep { !(it.path.endsWith('.min.js')) }
		outputFile = new File(project.ext.buildWebappDir, 'production.js')
		reporter = new YUICompressorErrorReporter(project.logger)
		prefix = '(function(){'
		postfix = '})();'
	}
	inputs.files ext.inputFiles
	outputs.files ext.outputFile
	doLast {
		ext.outputFile.withWriter { writer ->
			ext.inputMinFiles.each { writer << it.text }
			def streams = [
				new ByteArrayInputStream(ext.prefix.bytes),
				ext.inputRawFiles.collect { it.newInputStream() },
				new ByteArrayInputStream(ext.postfix.bytes)
			].flatten()
			new SequenceInputStream(Collections.enumeration(streams)).withReader {
				def compressor = new JavaScriptCompressor(it, ext.reporter)
				compressor.compress(writer, -1, true, true, false, false)
			}
		}
	}
}

task buildWebapp {
	dependsOn buildWebappContents, buildWebappLib
	dependsOn buildWebappMinifiedHTML, buildWebappMinifiedCSS, buildWebappMinifiedJavaScript
}

task prepareAppEngineSdk(type: Sync) {
	from zipTree(configurations.appengineSdk.singleFile)
	into project.ext.appengineSdkBaseDir
}

task deploy {
	dependsOn prepareAppEngineSdk, buildWebapp
	doLast {
		System.setProperty 'appengine.sdk.root', project.ext.appengineSdkDir.path
		String[] args = ['help']
		com.google.appengine.tools.admin.AppCfg.main args
	}
}
